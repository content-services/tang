// Code generated by mockery v2.32.0. DO NOT EDIT.

package tangy

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockTangy is an autogenerated mock type for the Tangy type
type MockTangy struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockTangy) Close() {
	_m.Called()
}

// RpmRepositoryVersionPackageSearch provides a mock function with given fields: ctx, hrefs, search, limit
func (_m *MockTangy) RpmRepositoryVersionPackageSearch(ctx context.Context, hrefs []string, search string, limit int) ([]RpmPackageSearch, error) {
	ret := _m.Called(ctx, hrefs, search, limit)

	var r0 []RpmPackageSearch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, string, int) ([]RpmPackageSearch, error)); ok {
		return rf(ctx, hrefs, search, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, string, int) []RpmPackageSearch); ok {
		r0 = rf(ctx, hrefs, search, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]RpmPackageSearch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, string, int) error); ok {
		r1 = rf(ctx, hrefs, search, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockTangy creates a new instance of MockTangy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTangy(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTangy {
	mock := &MockTangy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
